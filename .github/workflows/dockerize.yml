name: CI/CD Pipeline
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTIONS_PAT }}
          fetch-depth: 0  # Fetch all history for branches and tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_IMAGE_NAME }}:latest

  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Deploy to DigitalOcean
        uses: digitalocean/app_action/deploy@v2
        with:
          app_name: atomania-app
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          print_build_logs: true
          print_deploy_logs: true
          deploy_pr_preview: true


        #      - name: Deploy the app
#        id: deploy
#        uses: digitalocean/app_action/deploy@v2
#        with:
#          deploy_pr_preview: "true"
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#      - name: Notify Success
#        if: success()
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const buildLogs = process.env.BUILD_LOGS || 'No build logs available.';
#            const deployLogs = process.env.DEPLOY_LOGS || 'No deploy logs available.';
#
#            await github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: `ðŸš€ðŸš€ðŸš€ The app was successfully deployed at ${{ fromJson(steps.deploy.outputs.app).live_url }}. [1]
#
#              ## Logs
#              <details>
#              <summary>Build logs</summary>
#              \`\`\`
#              ${buildLogs}
#              \`\`\`
#              </details>
#              <details>
#              <summary>Deploy logs</summary>
#              \`\`\`
#              ${deployLogs}
#              \`\`\`
#              </details>`
#            });
#
#      - name: Notify Failure
#        if: failure()
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const buildLogs = process.env.BUILD_LOGS || 'No build logs available.';
#            const deployLogs = process.env.DEPLOY_LOGS || 'No deploy logs available.';
#
#            await github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: `The app failed to be deployed. Logs can be found [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
#
#              ## Logs
#              <details>
#              <summary>Build logs</summary>
#              \`\`\`
#              ${buildLogs}
#              \`\`\`
#              </details>
#              <details>
#              <summary>Deploy logs</summary>
#              \`\`\`
#              ${deployLogs}
#              \`\`\`
#              </details>`
#            });
#



        #      - name: Provision Droplet and deploy container
#        run: doctl compute droplet create "$GIT_TAG_NAME" --image docker-18-size-04 --size s-1vcpu-1gb --region nyc1 --user-data-file deploy.sh --wait


        # Determine the tag for the image
        #      - name: Set Docker image tag
        #        id: docker_tag
        #        run: |
        #          if [ "${{ github.event_name }}" == "pull_request" ]; then
        #            BUILD_NUMBER=$(cat build_number.txt || echo "0")
        #            BUILD_NUMBER=$((BUILD_NUMBER + 1))
        #            echo $BUILD_NUMBER > build_number.txt
        #            echo "BUILD_TAG=build-${BUILD_NUMBER}" >> $GITHUB_ENV
        #          else
        #            echo "BUILD_TAG=latest" >> $GITHUB_ENV
        #          fi
        #
        #      # Build and push the Docker image
        #      - name: Build and push Docker image
        #        run: |
        #          docker buildx build --push --tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.BUILD_TAG }} .
        #
        #      # Update build number file if pull request
        #      - name: Save build number
        #        if: github.event_name == 'pull_request'
        #        run: |
        #          git config --local user.name "github-actions[bot]"
        #          git config --local user.email "github-actions[bot]@users.noreply.github.com"
        #          git add build_number.txt
        #          git commit -m "Increment build number"
        #          git push origin HEAD:${{ github.head_ref }}
